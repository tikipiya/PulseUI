"""
UtilityClasses - Defines TailwindCSS-like utility classes and color system
"""
from typing import Dict, Tuple, Optional


class UtilityClasses:
    """Defines TailwindCSS-like utility classes and color system"""
    
    def __init__(self):
        # Color palette similar to TailwindCSS
        self.colors = {
            'red': {
                '50': (1.0, 0.95, 0.95, 1.0),
                '100': (1.0, 0.89, 0.89, 1.0),
                '200': (1.0, 0.79, 0.79, 1.0),
                '300': (1.0, 0.64, 0.64, 1.0),
                '400': (1.0, 0.45, 0.45, 1.0),
                '500': (1.0, 0.24, 0.24, 1.0),
                '600': (0.86, 0.15, 0.15, 1.0),
                '700': (0.73, 0.08, 0.08, 1.0),
                '800': (0.60, 0.05, 0.05, 1.0),
                '900': (0.48, 0.03, 0.03, 1.0)
            },
            'blue': {
                '50': (0.94, 0.98, 1.0, 1.0),
                '100': (0.86, 0.93, 1.0, 1.0),
                '200': (0.75, 0.85, 1.0, 1.0),
                '300': (0.58, 0.73, 1.0, 1.0),
                '400': (0.38, 0.58, 1.0, 1.0),
                '500': (0.23, 0.45, 1.0, 1.0),
                '600': (0.15, 0.35, 0.86, 1.0),
                '700': (0.10, 0.25, 0.73, 1.0),
                '800': (0.07, 0.17, 0.60, 1.0),
                '900': (0.05, 0.11, 0.48, 1.0)
            },
            'green': {
                '50': (0.94, 1.0, 0.95, 1.0),
                '100': (0.86, 1.0, 0.89, 1.0),
                '200': (0.75, 1.0, 0.79, 1.0),
                '300': (0.58, 1.0, 0.64, 1.0),
                '400': (0.38, 1.0, 0.45, 1.0),
                '500': (0.23, 1.0, 0.24, 1.0),
                '600': (0.15, 0.86, 0.15, 1.0),
                '700': (0.10, 0.73, 0.08, 1.0),
                '800': (0.07, 0.60, 0.05, 1.0),
                '900': (0.05, 0.48, 0.03, 1.0)
            },
            'yellow': {
                '50': (1.0, 1.0, 0.94, 1.0),
                '100': (1.0, 1.0, 0.86, 1.0),
                '200': (1.0, 1.0, 0.75, 1.0),
                '300': (1.0, 1.0, 0.58, 1.0),
                '400': (1.0, 1.0, 0.38, 1.0),
                '500': (1.0, 1.0, 0.23, 1.0),
                '600': (0.86, 0.86, 0.15, 1.0),
                '700': (0.73, 0.73, 0.10, 1.0),
                '800': (0.60, 0.60, 0.07, 1.0),
                '900': (0.48, 0.48, 0.05, 1.0)
            },
            'purple': {
                '50': (0.98, 0.95, 1.0, 1.0),
                '100': (0.93, 0.89, 1.0, 1.0),
                '200': (0.85, 0.79, 1.0, 1.0),
                '300': (0.73, 0.64, 1.0, 1.0),
                '400': (0.58, 0.45, 1.0, 1.0),
                '500': (0.45, 0.24, 1.0, 1.0),
                '600': (0.35, 0.15, 0.86, 1.0),
                '700': (0.25, 0.08, 0.73, 1.0),
                '800': (0.17, 0.05, 0.60, 1.0),
                '900': (0.11, 0.03, 0.48, 1.0)
            },
            'pink': {
                '50': (1.0, 0.95, 0.98, 1.0),
                '100': (1.0, 0.89, 0.93, 1.0),
                '200': (1.0, 0.79, 0.85, 1.0),
                '300': (1.0, 0.64, 0.73, 1.0),
                '400': (1.0, 0.45, 0.58, 1.0),
                '500': (1.0, 0.24, 0.45, 1.0),
                '600': (0.86, 0.15, 0.35, 1.0),
                '700': (0.73, 0.08, 0.25, 1.0),
                '800': (0.60, 0.05, 0.17, 1.0),
                '900': (0.48, 0.03, 0.11, 1.0)
            },
            'gray': {
                '50': (0.98, 0.98, 0.98, 1.0),
                '100': (0.96, 0.96, 0.96, 1.0),
                '200': (0.91, 0.91, 0.91, 1.0),
                '300': (0.83, 0.83, 0.83, 1.0),
                '400': (0.68, 0.68, 0.68, 1.0),
                '500': (0.51, 0.51, 0.51, 1.0),
                '600': (0.42, 0.42, 0.42, 1.0),
                '700': (0.33, 0.33, 0.33, 1.0),
                '800': (0.25, 0.25, 0.25, 1.0),
                '900': (0.17, 0.17, 0.17, 1.0)
            },
            'black': {
                '': (0.0, 0.0, 0.0, 1.0)
            },
            'white': {
                '': (1.0, 1.0, 1.0, 1.0)
            }
        }
        
        # Simple color names
        self.simple_colors = {
            'red': (1.0, 0.24, 0.24, 1.0),
            'blue': (0.23, 0.45, 1.0, 1.0),
            'green': (0.23, 1.0, 0.24, 1.0),
            'yellow': (1.0, 1.0, 0.23, 1.0),
            'purple': (0.45, 0.24, 1.0, 1.0),
            'pink': (1.0, 0.24, 0.45, 1.0),
            'gray': (0.51, 0.51, 0.51, 1.0),
            'black': (0.0, 0.0, 0.0, 1.0),
            'white': (1.0, 1.0, 1.0, 1.0)
        }
        
    def get_color(self, color_name: str, intensity: Optional[str] = None) -> Tuple[float, float, float, float]:
        """Get a color value by name and optional intensity"""
        if intensity:
            if color_name in self.colors and intensity in self.colors[color_name]:
                return self.colors[color_name][intensity]
        else:
            if color_name in self.simple_colors:
                return self.simple_colors[color_name]
            elif color_name in self.colors and '500' in self.colors[color_name]:
                return self.colors[color_name]['500']
                
        # Default to white if color not found
        return (1.0, 1.0, 1.0, 1.0)
        
    def get_spacing_value(self, spacing: str) -> int:
        """Get a spacing value"""
        spacing_map = {
            '0': 0,
            '1': 4,
            '2': 8,
            '3': 12,
            '4': 16,
            '5': 20,
            '6': 24,
            '8': 32,
            '10': 40,
            '12': 48,
            '16': 64,
            '20': 80,
            '24': 96,
            '32': 128,
            '40': 160,
            '48': 192,
            '56': 224,
            '64': 256
        }
        
        return spacing_map.get(spacing, 0)
        
    def get_border_radius_value(self, radius: str) -> int:
        """Get a border radius value"""
        radius_map = {
            'none': 0,
            'sm': 2,
            '': 4,
            'md': 6,
            'lg': 8,
            'xl': 12,
            '2xl': 16,
            '3xl': 24,
            'full': 9999
        }
        
        return radius_map.get(radius, 4)